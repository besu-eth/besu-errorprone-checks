plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    alias libs.plugins.spotless
    alias libs.plugins.artifactory
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    annotationProcessor libs.google.auto.service

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation libs.google.errorprone.testhelpers
    testImplementation libs.assertj.core
    testRuntimeOnly libs.picocli
    testRuntimeOnly libs.jetbrain.annotations
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.slf4j.api
    api libs.picocli

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.google.auto.service
    implementation libs.google.errorprone.annotations
    implementation libs.google.errorprone.core
    implementation libs.google.errorprone.check.api
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs += [
            // errorprone tests need access to the javac compiler
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
        importOrder 'org.hyperledger', 'java', 'javax', ''
        trimTrailingWhitespace()
        endWithNewline()
    }
}

publishing {
    publications {
        library(MavenPublication) {
            groupId = 'org.hyperledger.besu'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'besu-errorprone-checks'
                description = 'A collection of custom error prone checks'
                url = 'https://github.com/besu-eth/besu-errorprone-checks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/besu-eth/besu-errorprone-checks.git'
                    developerConnection = 'scm:git:ssh://github.com/besu-eth/besu-errorprone-checks.git'
                    url = 'https://github.com/besu-eth/besu-errorprone-checks'
                }
            }
        }
    }

    def artifactoryUser = project.hasProperty('artifactoryUser') ? project.property('artifactoryUser') : System.getenv('ARTIFACTORY_USER')
    def artifactoryKey = project.hasProperty('artifactoryApiKey') ? project.property('artifactoryApiKey') : System.getenv('ARTIFACTORY_KEY')
    def artifactoryRepo = System.getenv('ARTIFACTORY_REPO') ?: 'besu-maven'
    def artifactoryOrg = System.getenv('ARTIFACTORY_ORG') ?: 'hyperledger'

    artifactory {
        contextUrl = "https://hyperledger.jfrog.io/${artifactoryOrg}"
        publish {
            repository {
                repoKey = artifactoryRepo
                username = artifactoryUser
                password = artifactoryKey
            }
            defaults {
                publications('library')
                publishArtifacts = true
                publishPom = true
            }
        }
    }
}