plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    alias libs.plugins.spotless
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    annotationProcessor libs.google.auto.service

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation libs.google.errorprone.testhelpers
    testImplementation libs.assertj.core
    testRuntimeOnly libs.picocli
    testRuntimeOnly libs.jetbrain.annotations
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.slf4j.api
    api libs.picocli

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.google.auto.service
    implementation libs.google.errorprone.annotations
    implementation libs.google.errorprone.core
    implementation libs.google.errorprone.check.api
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs += [
            // errorprone tests need access to the javac compiler
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
        importOrder 'org.hyperledger', 'java', 'javax', ''
        trimTrailingWhitespace()
        endWithNewline()
    }
}